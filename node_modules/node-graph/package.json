{
  "name": "node-graph",
  "version": "0.0.1",
  "description": "Simple library for graph manipulations",
  "main": "lib/Graph.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/dolphin278/graph.git"
  },
  "keywords": [
    "graph",
    "library",
    "nodes",
    "vertices",
    "edges"
  ],
  "author": {
    "name": "Boris Egorov"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "dependencies": {
    "JSV": "~4.0.2"
  },
  "readme": "#graph\n\nSimple library for graph manipulations.\n\nI need some graph-related operations for other project, so I decided to move them to separate module.\n\nIt is not intended to be full-featured graph manupulation (at least for now) but pull requests are welcome.\n\nIt will develop as my requirements will get more sophisticated.\n\nDon't use it for large graphs — it uses array's `.filter()` methods to scan for nodes and edges, so it could be slow on large structures.\n\n## Installation\n\n```npm install node-graph```\n\n## Usage\n\n###new Graph(structure)\n\nReturns graph instance.\n\n```\nvar Graph = require('node-graph');\n\nvar structure = {\n    nodes: [\n        {\n            name: 'A'\n        },\n        {\n            name: 'B',\n            youCanPutArbitraryDataOnYourNodes: { ... }\n        }\n    ],\n    edges: [\n        {\n            name: 'A->B',\n            from: 'A',\n            to: 'B',\n            youCanPutArbitraryDataOnYourEdgesToo: { ... }\n        }\n    ]\n}\n\nvar gr = new Graph(structure);\n```\n\nConstructor checks that argument conforms to graph JSON schema (locates in `schema/graph.json`). \n\n**tl;dr** It requires `name` field for nodes and `name`, `from`, `to` fields for edges. Also it checks for `name` uniqueness amongst edges and nodes respectively.\nThen is checks that every edge points to existing nodes (`from` and `to` fields containing valid node names).\n\n###outboundEdges(node)\n\nReturns array of edges that came out of specified node:\n\n```\n// You can pick outbound edges by node name\nvar outboundEdges = gr.outboundEdges('B');\n\n// Or providing node object\nvar node = gr.getNode('B');\nvar outboundEdges2 = gr.outboundEdges(node);\n```\n\nResult example:\n```\n[{\"name\":\"BD\",\"from\":\"B\",\"to\":\"D\"}]\n```\n\n###inboundEdges(node)\n\nReturns array of edges that came in to specified node:\n\n```\n// You can pick outbound edges by node name\nvar inboundEdges = gr.inboundEdges('D');\n\n// Or providing node object\nvar node = gr.getNode('D');\nvar inboundEdges2 = gr.inboundEdges(node);\n```\nResult example:\n\n```\n[\n    {\"name\":\"BD\",\"from\":\"B\",\"to\":\"D\"},\n    {\"name\":\"CD\",\"from\":\"C\",\"to\":\"D\"}\n]\n```\n\n###isTerminalNode(node)\n\nIf there are no outbound edges from specified node, returns true, false otherwise.\n\n```\n    // using node object\n    var node = gr.getNode('D');\n    gr.isTerminalNode(node);\n    \n    // using node name\n    gr.isTerminalNode('D');\n```\n\n##getNode(name)\n\nReturns node object by its name.\n\n##getEdge(name)\n\nReturns edge object by its name.\n\n##License\n\nMIT\n",
  "bugs": {
    "url": "https://github.com/dolphin278/graph/issues"
  },
  "homepage": "https://github.com/dolphin278/graph",
  "_id": "node-graph@0.0.1",
  "dist": {
    "shasum": "8dcbf6c039cffe8cd8a5925d49805332593c2eda"
  },
  "_from": "node-graph@",
  "_resolved": "https://registry.npmjs.org/node-graph/-/node-graph-0.0.1.tgz"
}
